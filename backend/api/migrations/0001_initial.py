# Generated by Django 4.0.5 on 2022-06-21 06:29

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Deque',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_on', models.DateField(auto_created=True)),
                ('title', models.CharField(max_length=200, verbose_name='Title of the card')),
                ('category', models.CharField(default='N/A', max_length=200, verbose_name='Category of the deque')),
                ('difficulty', models.IntegerField(default=0, verbose_name='Difficulty score')),
                ('time', models.PositiveBigIntegerField(default=120, verbose_name='Allocated Time(seconds)')),
                ('sidenote', models.TextField(verbose_name='Sidenote for the player')),
                ('deque_master', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='mastered_deques', to=settings.AUTH_USER_MODEL)),
                ('owner', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='deques', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-difficulty', '-created_on'],
            },
        ),
        migrations.CreateModel(
            name='Profile',
            fields=[
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, primary_key=True, related_name='profile', serialize=False, to=settings.AUTH_USER_MODEL)),
                ('username', models.CharField(max_length=100, unique=True, verbose_name='Unique username')),
                ('note', models.TextField(verbose_name='Note by the user')),
                ('avatar', models.URLField(default='https://api.lorem.space/image/game', unique=True, verbose_name='Avatar cdn url')),
                ('respect', models.PositiveIntegerField(default=0, verbose_name='Respect gained from fellows')),
                ('rank', models.PositiveSmallIntegerField(default=1, verbose_name='Rank of the user')),
                ('meta', models.TextField(verbose_name='Meta-data about the user')),
                ('settings', models.TextField(verbose_name='User preferences')),
            ],
            options={
                'ordering': ['-rank', '-respect', 'username'],
            },
        ),
        migrations.CreateModel(
            name='User_Deque',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_finished', models.BooleanField(default=False, verbose_name='User finished the Deque')),
                ('deque', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='visited_user', to='api.deque')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='visited_deques', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='User_Achievement',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('achievements', models.TextField(default='', verbose_name='Achievemnets by the user in csv-form')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='achievements', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Card',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('question', models.CharField(max_length=255, verbose_name='Question')),
                ('score', models.IntegerField(default=10, verbose_name='Score for this cards')),
                ('correct_answer', models.PositiveIntegerField(verbose_name='ID of correct Answer')),
                ('answers', models.TextField(verbose_name='Answers of this card')),
                ('deque', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='cards', to='api.deque')),
            ],
            options={
                'ordering': ['-deque', 'score'],
            },
        ),
    ]
